Yes, here is the complete guide formatted as a single Markdown block. You can copy the entire text below and paste it directly into your GitHub README file.

Markdown

# WireGuard VPN Setup with Docker

This guide provides a comprehensive walkthrough for setting up a secure and easy-to-manage WireGuard VPN server using Docker and Docker Compose. This method simplifies installation and configuration by leveraging the popular `linuxserver/wireguard` image.

---
## Prerequisites

1.  A server or VPS with a public IP address.
2.  **Docker** and **Docker Compose** installed on the server.
3.  Root or `sudo` access.
4.  **Crucially**, access to your cloud provider's firewall settings (e.g., AWS Security Groups, Google Cloud Firewall) to open the necessary port.

---
## Part 1: Server Setup

### 1. Create the Directory Structure
First, create a dedicated directory for your WireGuard setup. This will hold your configuration files.
```bash
mkdir -p /opt/wireguard
cd /opt/wireguard
2. Create the docker-compose.yml File
Create a docker-compose.yml file to define the WireGuard service.

Bash

nano docker-compose.yml
Paste the following configuration into the file.

YAML

---
version: "2.1"
services:
  wireguard:
    image: lscr.io/linuxserver/wireguard:latest
    container_name: wireguard
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Etc/UTC # Optional: Set your timezone, e.g., "Europe/London"
      - SERVERURL=auto # IMPORTANT: Change to your public IP if 'auto' fails
      - PEERS=1 # The number of client profiles to generate
    volumes:
      - ./config:/config
      - /lib/modules:/lib/modules
    ports:
      - 51820:51820/udp
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1
    restart: unless-stopped
PUID/PGID: Set these to your user's ID to avoid permission issues. Find them by running the id command.

SERVERURL: Set this to your server's public IP address. While auto often works, setting it manually is more reliable (e.g., SERVERURL=123.45.67.89).

PEERS: The number of client configuration files to generate. You can start with 1.

3. Configure Your Firewall
You must open UDP port 51820 in two places:

On the Server's Firewall (if active):

Bash

sudo ufw allow 51820/udp
On Your Cloud Provider's Firewall:
Log in to your cloud provider's dashboard (AWS, Google Cloud, Oracle, etc.). Find the "Security Groups" or "Network Rules" for your server and add an inbound rule to allow UDP traffic on port 51820.

4. Start the WireGuard Container
Now, start the service.

Bash

docker-compose up -d
The container will start and automatically generate all server and client configuration files inside the ./config directory.

Part 2: Managing Peers (Clients)
1. Accessing Client Configurations
After starting the container, your client configuration(s) will be in the config directory, organized by peer number (e.g., peer1, peer2).

For Mobile Devices (QR Code)
The easiest way to connect a phone is by scanning a QR code.

View the QR code in the logs (fastest method):

Bash

docker-compose logs
Scroll up to find the text-based QR code printed on startup.

View the QR code from the saved image file:
First, install a command-line QR code reader:

Bash

sudo apt update && sudo apt install zbar-tools -y
Then, decode the saved image and display it as text:

Bash

zbarimg --quiet --raw ./config/peer1/peer1.png | qrencode -t ansiutf8
For Desktop Devices (.conf file)
To connect a computer, you'll need the configuration file.

View the configuration file's content:

Bash

cat ./config/peer1/peer1.conf
Copy the output and save it as a .conf file on your computer, then import it into your desktop WireGuard application.

2. Adding a New Peer
To add another client:

Stop the container: docker-compose down

Edit docker-compose.yml and increment the PEERS number (e.g., PEERS=2).

Start the container: docker-compose up -d

A new folder (./config/peer2) will be created with the new configuration.

Part 3: Troubleshooting
"No such file or directory" when trying to view configs:
This means the files were not created on your server. The most common cause is a permissions issue. Ensure the PUID and PGID in your docker-compose.yml match the output of the id command. Then, run docker-compose down, sudo rm -rf ./config, and docker-compose up -d to reset everything.

Client is connected but has no internet / no handshake:
This is almost always a firewall issue.

Run sudo ufw status to confirm port 51820/udp is allowed.

Log in to your cloud provider's website and confirm the firewall rule exists there. This is the most common point of failure.

QR code doesn't work / connection fails:
Your SERVERURL is likely incorrect. The container may have guessed the wrong IP. Manually set your server's public IP in the docker-compose.yml, then run docker-compose down, sudo rm -rf ./config, and docker-compose up -d to generate a correct configuration.
